# -*- coding: utf-8 -*-
"""NY Animals Sold.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I4M3-JlUcxLbcEHz2Pi_0ciR8ErTwYDD
"""

# Commented out IPython magic to ensure Python compatibility.
#everything being installed
# %pip install -U "vegafusion[embed]"
# %pip install geopandas
# %pip install geojson
# %pip install pandas-geojson

# Commented out IPython magic to ensure Python compatibility.
#everything being imported
import pandas as pd
import altair as alt
import vegafusion as vf
from vega_datasets import data
import numpy as np
import matplotlib
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
import json
import geojson
import geopandas as gpd

#cleaning and learning about the New York illegal animal data frame
nyc_zip=gpd.read_file("/nyc-zip-code-tabulation-areas-polygons.geojson")
nyc_borough = gpd.read_file("/Borough Boundaries.geojson")
nyc_borough_population = pd.read_csv('/nyc_pop.csv')
df = pd.read_csv("/illegal-animals.csv")
df.head(50)
df['Borough']=df['Borough'].str.capitalize()
df=df.rename(columns = {'Borough':'boro_name'})
df = df.rename(columns = {'Incident Zip':'zip_code'})
df['zip_code']=df['zip_code'].fillna(0).astype(np.int64)
list(df)
df.shape

"""# Question 1:
What type of animal is most commonly sold in each NYC Borough?
"""

mapper=alt.Chart(nyc_borough).mark_geoshape(
    fill='lightgray',
    stroke='white').encode(
)
df.head(10)
df_sold=df.loc[df['Complaint Type'] == 'Illegal Animal Sold', :]
df_sold_no_other=df_sold.loc[df['Descriptor'] != 'Other', :]
borough_counts = df_sold.groupby(['boro_name', 'Descriptor']).size().reset_index(name='count')
borough_max = borough_counts.groupby(['boro_name'])['count'].transform(max) == borough_counts['count']
mcbr = borough_counts[borough_max]
mcbr

# visualization of results including 'other'
def bor_map(boro, file):
    chart = alt.Chart(nyc_borough).mark_geoshape(
        stroke='black',
        strokeWidth=1
    ).encode(
        color='Descriptor:N',
        opacity='count:Q'
    ).transform_lookup(
        lookup='boro_name',
        from_=alt.LookupData(file, 'boro_name', ['Descriptor', 'count'])
    ).transform_filter((alt.datum.boro_name == boro)).project('albersUsa').properties(
    width=700,
    height=500,
    title='Most Commonly Sold Animal by NYC Borough'
)

    return chart
nyc_boroughs=bor_map('Bronx', mcbr) +bor_map('Brooklyn', mcbr)+bor_map('Manhattan', mcbr)+bor_map('Queens', mcbr)+bor_map('Staten island', mcbr)
nyc_boroughs

# visualization of results excluding 'other'
borough_counts1 = df_sold_no_other.groupby(['boro_name', 'Descriptor']).size().reset_index(name='count')
borough_max1 = borough_counts1.groupby(['boro_name'])['count'].transform(max) == borough_counts1['count']
mcbr_no_other = borough_counts1[borough_max1]
mcbr_no_other
nyc_boroughs=bor_map('Bronx', mcbr_no_other) +bor_map('Brooklyn', mcbr_no_other)+bor_map('Manhattan', mcbr_no_other)+bor_map('Queens', mcbr_no_other)+bor_map('Staten island', mcbr_no_other)
nyc_boroughs

"""# Question 2:

What type of animal is most commonly kept as a pet in each NYC zip code?
"""

chart = alt.Chart(nyc_zip).mark_geoshape().encode()
nyc_zip=nyc_zip.rename(columns = {'postalCode':'zip_code'})
nyc_zip['zip_code']=nyc_zip['zip_code'].astype('int64')
map_zip=alt.Chart(nyc_zip).mark_geoshape(
    fill='lightgray',
    stroke='white').encode(
)
map_zip
nyc_pet_zip=nyc_zip
df_pet=df.loc[df['Complaint Type'] == 'Illegal Animal Kept as Pet', :]
df_pet_no_other=df_pet.loc[df['Descriptor'] != 'Other', :]
borough_counts_zip = df_pet.groupby(['zip_code', 'Descriptor']).size().reset_index(name='count')
borough_max_zip = borough_counts_zip.groupby(['zip_code'])['count'].transform(max) == borough_counts_zip['count']
mcpr = borough_counts_zip[borough_max_zip]
mcpr = mcpr.groupby(['zip_code', 'count'])['Descriptor'].agg(', '.join).reset_index()
#mc=mcpr.drop_duplicates('zip_code')
mcpr
#borough_counts

mapper=nyc_zip.merge(mcpr, on='zip_code', how='right')
Pet_zip_map=alt.Chart(mapper).mark_geoshape().encode(
    color='Descriptor:N',
    #opacity='count:Q',
    tooltip=['Descriptor:N', 'count:Q', 'zip_code:N']
).properties(
    width=700,
    height=500,
    title='Highest Number of Animal Reports in Queens')
Pet_zip_map

borough_counts_zip1 = df_pet_no_other.groupby(['zip_code', 'Descriptor']).size().reset_index(name='count')
borough_max_zip1 = borough_counts_zip1.groupby(['zip_code'])['count'].transform(max) == borough_counts_zip1['count']
mcpr1 = borough_counts_zip1[borough_max_zip1]
mcpr1 = mcpr1.groupby(['zip_code', 'count'])['Descriptor'].agg(', '.join).reset_index()

mapper1=nyc_pet_zip.merge(mcpr1, on='zip_code', how='right')
Pet_zip_map1=alt.Chart(mapper1).mark_geoshape().encode(
    color='Descriptor:N',
    #opacity='count:Q',
    tooltip=['Descriptor:N', 'count:Q', 'zip_code:N']
).properties(
    width=700,
    height=500,
    title='Highest Number of Animal Reports in Queens (No "Other" Value)')
Pet_zip_map1

"""# Question 3:

What part of the NYC Borough of Queens is reported as having the highest number of animal reports?
"""

nyc_zip=nyc_zip[nyc_zip['borough']== 'Queens']

df['City']=df['City'].str.capitalize()
Queens=df.loc[df['boro_name']=='Queens', :]
city_counts = Queens.groupby(['City']).size().reset_index(name='count')
source = pd.read_csv(data.zipcodes.url)
large=city_counts.nlargest(1, 'count')
large
city_counts=city_counts.rename(columns = {'City':'city'})
source=source[source['county']== 'Queens']
merged_data = source.merge(city_counts, on='city', how='left')
merged_data[pd.notnull(merged_data['count'])]
larger=merged_data.nlargest(1, 'count')
high=merged_data[pd.notnull(merged_data['count'])]
higher=high[['zip_code', 'city', 'count']]
mapper=nyc_zip.merge(higher, on='zip_code', how='left')
mapper
largest_count= mapper.nlargest(1, 'count')
mapper=mapper.fillna(0)
Queens_map=alt.Chart(mapper).mark_geoshape().encode(
    color='count:Q',
    stroke=alt.condition(
        alt.datum.count == largest_count['count'].values[0],
        alt.value('red'),
        alt.value('steelblue')
    ),
    tooltip=['city:N', 'count:Q']
).properties(
    width=700,
    height=500,
    title='Highest Number of Animal Reports in Queens')
Queens_map
#note: null values were filled to 0 since they are relatively irrelevent

"""# Question 4:

What is the rate that each species is reported as appearing in each Borough relative
to the number of people who live in that Borough? (Hint this will require acquiring an additional dataset).
"""

#nyc_borough_population['boro_name']=nyc_borough_population['boro_name'].str.capitalize()
borough_counts_report = df.groupby(['boro_name', 'Descriptor']).size().reset_index(name='count')
#borough_counts_report['boro_name']=borough_counts_report['boro_name'].str.capitalize()
mergeing = nyc_borough_population.merge(borough_counts_report, on='boro_name', how='right')
mergeing['rate'] = mergeing['count'] / mergeing['2010']
mergeing
#list(borough_counts_report), list(nyc_borough_population)
merged_map_data = nyc_borough.merge(mergeing, on='boro_name')
def bor_map1(name):
  merged_map_data[merged_map_data['Descriptor']==name]
  choropleth_map = alt.Chart(merged_map_data).mark_geoshape().encode(
      color='rate:Q',
      tooltip=['boro_name:N', 'Descriptor:N', 'rate:Q']
      ).properties(
          width=700,
          height=500,
          title='Rate of Reported '+ name + 'per population'
          )
  return choropleth_map

merged_map_data['Descriptor'].value_counts()



def trying(merged_map_data):
    descriptor_values = merged_map_data['Descriptor'].unique()
    choropleth_maps = []

    for name in descriptor_values:
        filtered_data = merged_map_data[merged_map_data['Descriptor'] == name]

        rate_max = filtered_data['rate'].max()

        choropleth_map = alt.Chart(filtered_data).mark_geoshape().encode(
            color=alt.Color('rate:Q', scale=alt.Scale(domain=(0, rate_max), nice=False)),
            tooltip=['boro_name:N', 'Descriptor:N', 'rate:Q']
        ).properties(
            width=300,
            height=200,
            title='Rate of Reported ' + name + ' per population'
        )

        choropleth_maps.append(choropleth_map)

    combined_chart = alt.vconcat(*choropleth_maps)
    return combined_chart

trying(merged_map_data)

"""# Question 5:

Within each zipcode, how does the way that complaints are filed correlate with the type of animal being reported?
"""

df_pet = df.loc[df['Complaint Type'] == 'Illegal Animal Kept as Pet', :]

borough_counts_sold = df_sold.groupby(['zip_code', 'Descriptor']).size().reset_index(name='count')
borough_max_sold = borough_counts_sold.groupby(['zip_code'])['count'].transform(max) == borough_counts_sold['count']
mcbrs = borough_counts_sold[borough_max_sold]

borough_counts_zip = borough_counts_zip.rename(columns={'count': 'count_kept_as_pet'})
boro_zip_comp = borough_counts_zip.merge(borough_counts_sold, on=['zip_code', 'Descriptor'], how='outer')
boro_zip_comp = boro_zip_comp.fillna(0)
boro_zip_comp['correlation'] = boro_zip_comp['count_kept_as_pet']-boro_zip_comp['count']
boro_zip_comp

#source = pd.read_csv(data.zipcodes.url)
mappersss=nyc_pet_zip.merge(boro_zip_comp, on='zip_code', how='right')

Pet_zip_mapsss=alt.Chart(mappersss).mark_geoshape().encode(
    color='Descriptor:N',
    #opacity='count:Q',
    tooltip=['Descriptor:N', 'correlation:N', 'zip_code:N']
).properties(
    width=700,
    height=500,
    title='Correlation Between Complaint Types in each zip code')
Pet_zip_mapsss

"""# Question 6:

Do illegal animal sales and illegal pet keeping tend to be co-located?
"""

borough_counts_zip1 = df_pet.groupby(['zip_code']).size().reset_index(name='count')
borough_counts_sold1 = df_sold.groupby(['zip_code']).size().reset_index(name='count')
borough_counts_zip1 = borough_counts_zip1.rename(columns={'count': 'count_kept_as_pet'})
boro_zip_comp1=df.groupby(['zip_code']).size().reset_index(name='count')
boro_zip_comp1 = borough_counts_zip1.merge(borough_counts_sold1, on=['zip_code'], how='outer')
boro_zip_comp1 = boro_zip_comp1.fillna(0)

boro_zip_comp1['location'] = boro_zip_comp1['count_kept_as_pet'] - boro_zip_comp1['count']
co=boro_zip_comp1['location']==0
pet= boro_zip_comp1['location']>0
sales= boro_zip_comp1['location']<0
boro_zip_comp1

boro_zip_comp1.loc[co == True, ['location']]= "Co-located"

boro_zip_comp1.loc[pet == True, ['location']]= "More Illegal Pet"
boro_zip_comp1.loc[sales == True, ['location']]= "More Illegal Sales"
tring=boro_zip_comp1
tring

#source = pd.read_csv(data.zipcodes.url)
mapperssss=nyc_pet_zip.merge(tring, on='zip_code', how='right')

Pet_zip_mapssss=alt.Chart(mapperssss).mark_geoshape().encode(
    color='location:N',
    tooltip=['location:N', 'zip_code:N']
).properties(
    width=700,
    height=500,
    title='Correlation Between Complaint Types in each zip code')
Pet_zip_mapssss